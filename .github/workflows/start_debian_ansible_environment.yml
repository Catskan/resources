#Github Action to run the Debian-Ansible container and start Ansible to manager targets
on:
  workflow_dispatch:
#Add inputs parameters to run the workflow
    inputs:
      image_tag:
        description: Tag of the Debian-Ansible image to deploy
        type: string
        default: 'catskan/debian-ansible:3'
        required: true
      target_os:
        description: Target OS to use ansible
        type: choice
        options:
          - Linux
          - Windows
        required: true

jobs:
  start-ansible:
    name: run ansible container
    runs-on: self-hosted
    env: 
      CONTAINER_NAME: Ansible
    steps:
#Checkout the repo to have all files needed
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get secrets by name and by ARN
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            arn:aws:secretsmanager:eu-west-3:850204412331:secret:Ansible-gTAmY1
          parse-json-secrets: true
#Replaces all token in the VagrantFile
      - name: Replace tokens in VagrantFile
        # You may pin to the exact commit or the version.
        # uses: cschleiden/replace-tokens@8e091844c27eb36853efbfade5ffca07260f0250
        uses: cschleiden/replace-tokens@v1.2
        with:
          files: '${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }}/Vagrantfile'       
        env:
          ContainerName: ${{ env.CONTAINER_NAME }}
          ImageTag: ${{ github.event.inputs.image_tag }}
          AwsAccessKeyID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AwsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AwsDefaultRegion: ${{ secrets.AWS_DEFAULT_REGION }}
          AnsibleConfig: '/share/git/resources/Ansible/ansible.cfg'

  #Replaces all token in the ansible.cfg
      - name: Replace tokens in ansible.cfg
        # You may pin to the exact commit or the version.
        # uses: cschleiden/replace-tokens@8e091844c27eb36853efbfade5ffca07260f0250
        uses: cschleiden/replace-tokens@v1.2
        with:
          files: '${{ github.workspace }}/Ansible/ansible.cfg'
        env:
          AnsibleInventoryFile: ${{ env.ANSIBLE_ANSIBLE_INVENTORY_LOCATION }}
          AnsibleLogOutputPath: ${{ env.ANSIBLE_ANSIBLE_LOG_PATH }}

      - name: Display VagrantFile
        run: cat '${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }}/Vagrantfile'

      - name: Display ansible.cfg
        run: cat '${{ github.workspace }}/Ansible/ansible.cfg'

#Check the runner OS to start docker and use the right VagrantFile
      - name: Start docker on macOS
        if: runner.os == 'macOS'
        run: | 
          open -a docker && sleep 10

      - name: Ensure docker daemon is running on Linux
        if: runner.os == 'Linux'
        run: |
            until [ "$(systemctl is-active docker)" == "active" ]
              do
                sudo systemctl start containerd docker
                sleep 10s
              done

      # - name: Check if there is an existing vagrant box with the good image
      #   run: |
      #     if [ "$(docker ps --format '{{ .Names }}')" = "${{ env.CONTAINER_NAME }}" ] && [ "$(docker ps --format '{{.Image}}')" != "${{ github.event.inputs.image_tag }}" ];
      #     then
      #       echo ok
      #       cd ${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }} && vagrant destroy -f
      #     fi

      - name: Start Vagrant box on Linux
        if: runner.os == 'Linux'
        run: |
            cd ${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }} && sudo vagrant up

      - name: Start Vagrant box on MacOS
        if: runner.os == 'macOS'
        run: |
            cd ${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }} && vagrant up

      - name: Start ansible on ${{ github.event.inputs.target_os }} hosts
        #if: ${{ github.event.inputs.target_os }} == 'Windows'
        run: |
          cd ${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }} && sudo vagrant docker-exec ${{ env.CONTAINER_NAME }} -- ansible-playbook -i /share/git/resources/Ansible/Inventory/hosts.yaml /share/git/resources/Ansible/main_${{ github.event.inputs.target_os }}_playbook.yml

      - name: Delete ${{ env.CONTAINER_NAME }} container
        if: always()
        run: |
           cd ${{ github.workspace }}/Vagrant/Ansible/${{ runner.os }} && sudo vagrant destroy -f; sudo docker rm "#{ContainerName}#" -f