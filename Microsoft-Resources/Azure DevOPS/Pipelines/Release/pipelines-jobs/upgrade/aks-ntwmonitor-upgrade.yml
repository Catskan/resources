jobs:
- job: AKS_iQ_Resources_Job
  pool:
    name: $(agent-pool-name)
    demands:
    - agent.os -equals Linux
  
  steps:
  # Display the component new image version, the customername and the environment
  - task: Bash@3
    displayName: 'Update Build Title Name'
    inputs:
      targetType: 'inline'
      script: | 
        echo "##vso[build.updatebuildnumber]UPGRADETO-CLUSTER1-A-$(IQ_IMAGE_VERSION)_CLIENT=$(CUSTOMERNAME)_ENV=$(ENVIRONMENT)"

  #take variables to be used from the shared Keyvault
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true

  #Retrieve the name of the variable that contains the name of the tenant's keyvault
  - task: AzureCLI@2
    displayName: Getting Tenant Keyvault name
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        getvariable=$(az keyvault secret list --vault-name $(vaultsNamesKeyvault) --output table --query [].'name'|  grep -w '$(CUSTOMERNAME)KVname')
        kvname=$(az keyvault secret show --name $getvariable --vault-name $(vaultsNamesKeyvault) --query 'value' | tr -d \'\")
        echo "##vso[task.setvariable variable=TENANTKV;]$kvname"

  #take variables to be used from the tenant Keyvault
  - task: AzureKeyVault@1
    displayName: Tenant Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(TENANTKV)'
      SecretsFilter: '*'
      runAsPreJob: false
  
  #validate if namespace exists
  - task: AzureCLI@2
    displayName: Test AKS resources existence
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az login --identity
        az aks get-credentials --resource-group $(aks-resource-group) --name $(aks-cluster-name) --overwrite-existing --file /home/azureuser/.kube/config
        export KUBECONFIG=/home/azureuser/.kube/config
        kubelogin convert-kubeconfig -l msi
        Namespace=$(kubectl get namespace | grep $(CUSTOMERNAME))
        if [ -z "$Namespace" ]
        then
          "##vso[task.logissue type=error]TENANT NAMESPACE DOESN'T EXIST, PLEASE VERIFY";
          exit 1
        fi

  #replace variables in kubernetes files using the input variables and also from the two keyvaults
  - task: replacetokens@5
    displayName: Replace variables in kubernetes templates
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/ntwmonitor'
      targetFiles: |
        configmap-ntwmonitor.yaml
        secret-ntwmonitor.yaml
        deploy-ntwmonitor.yaml
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  #update of client's configmap in kubernetes
  - task: Kubernetes@1
    displayName: Update iQ Configmap
    inputs:
      connectionType: 'None'
      forceUpdateConfigMap: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/ntwmonitor/configmap-ntwmonitor.yaml
      secretType: 'generic'
  
  #update of client's secret in kubernetes
  - task: Kubernetes@1
    displayName: Update iQ secret
    inputs:
      connectionType: 'None'
      forceUpdate: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/ntwmonitor/secret-ntwmonitor.yaml
      secretType: 'generic'
  
  #create iQ container inside the cluster
  - task: Kubernetes@1
    displayName: Deploy iQ Container in Kubernetes
    inputs:
      connectionType: 'None'
      forceUpdate: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/ntwmonitor/deploy-ntwmonitor.yaml
      secretType: 'generic'
  