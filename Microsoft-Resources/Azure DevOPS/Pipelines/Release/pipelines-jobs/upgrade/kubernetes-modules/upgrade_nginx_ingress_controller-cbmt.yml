jobs:
- job: Upgrade_NGINX_PLUS_INGRESS_CONTROLLER
  pool:
    name: $(agent-pool-name)
    demands:
    - agent.os -equals Linux
  steps:
  # Check if the image exist
  - task: AzureCLI@2
    displayName: Test if the image exist
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        if az acr repository show-tags --repository nginx-plus-ingress --name $(azureContainerRegistry) | grep $(INGRESS_IMAGE_TAG); 
        then echo "$(INGRESS_IMAGE_TAG) exist. Continue ..."; 
        else echo "$(INGRESS_IMAGE_TAG) not found inside $(azureContainerRegistry)/nginx-plus-ingress."; exit 1; 
        fi
  #take variables to be used from the shared Keyvault
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(cbmt-shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true

  # Display the current image version, the customername and if swo or not
  - task: Bash@3
    displayName: 'Update Build Title Name'
    inputs:
      targetType: 'inline'
      script: | 
        echo "##vso[build.updatebuildnumber]UPGRADETO-INGRESS_CONTROLLER-$(INGRESS_IMAGE_TAG)_ENV=$(ENVIRONMENT)"

  - task: Bash@3
    displayName: Get aks credentials
    inputs:
      targetType: 'inline'
      Script: |
        az login --identity
        az account set --subscription $(azure-subscription-id)
        az aks get-credentials --resource-group $(aks-resource-group) --name $(aks-cluster-name) --overwrite-existing --file /home/azureuser/.kube/config
        export KUBECONFIG=/home/azureuser/.kube/config
        kubelogin convert-kubeconfig -l msi

  - task: Bash@3
    displayName: Ingress Controller Upgrade
    inputs:
      targetType: 'inline'
      script: |
        ip=$(cbmtIngressPrivateIP)
          echo -e "controller:
            service:
              loadBalancerIP: $ip
              annotations:
                service.beta.kubernetes.io/azure-load-balancer-internal: \"true\"" > /tmp/internal-ingress.yaml
        IngressImageTag=$(INGRESS_IMAGE_TAG)
        INGRESS_CONTROLLER_VERSION=(${IngressImageTag//-/ })
        git clone https://github.com/nginxinc/kubernetes-ingress/
        cd kubernetes-ingress/deployments/helm-chart
        git checkout v$INGRESS_CONTROLLER_VERSION
        kubectl apply -f crds/
        helm repo update nginx-stable
        helm --debug upgrade nginx-ingress-cbmt nginx-stable/nginx-ingress -n ingress-nginx-cbmt \
              -f /tmp/internal-ingress.yaml \
              --set controller.nginxplus=true \
              --set controller.image.repository=$(azureContainerRegistry)/nginx-plus-ingress \
              --set controller.image.tag=$(INGRESS_IMAGE_TAG) \
              --set controller.image.pullPolicy=$(NGINX_PULL_POLICY) \
              --set controller.config.name=nginx-config \
              --set controller.config.entries."ssl-protocols"='TLSv1.2 TLSv1.3' \
              --set controller.config.entries."proxy-set-headers"=ingress-nginx/custom-headers \
              --set controller.nodeSelector."kubernetes\.io/os"=linux \
              --set controller.nodeSelector."pods"=ingress \
              --set controller.enableCustomResources=true \
              --set controller.globalConfiguraion.create=true \
              --set controller.enableSnippets=true \
              --set controller.replicaCount=2 \
              --set controller.ingressClass=nginx \
              --set controller.globalConfiguration.spec."hsts"=true \
              --set controller.healthStatus=true \
              --set controller.healthStatusURI=/nginx-health \
              --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux \
              --set controller.service.type=LoadBalancer \
              --set controller.service.loadBalancerIP=$(cbmtIngressPrivateIP) \
              --set controller.nginxDebug=false \
              --set controller.logLevel=1 \
              --set controller.enablePreviewPolicies=false \
              --set controller.enableOIDC=false \
              --set configmap.error-log-level=debug
              
  - task: Kubernetes@1
    displayName: Update Nginx ConfigMap
    inputs:
      connectionType: 'None'
      forceUpdateConfigMap: true
      namespace: 'ingress-nginx-cbmt'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/nginx-ingress/nginx-config-cbmt.yaml
      secretType: 'generic'

