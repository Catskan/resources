jobs:
#JOB TO CREATE THE LICENSE USING THE HOSTED WINDOWS BASED AGENT
- job: License_Generation_Job
  pool:
    vmImage: 'windows-2019'
  
  steps:
  # Display the current image version, the customername and if swo or not
  # - task: PowerShell@2
  #   displayName: 'Update Build Title Name'
  #   inputs:
  #     targetType: 'inline'
  #     script: | 
  #       Write-Host "##vso[build.updatebuildnumber]$(MSmonitor_IMAGE_VERSION)_CLIENT=$(CUSTOMERNAME)_SWO=$(SWO_TENANT)"
    
  #take variables to be used from the shared Keyvault
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true

  #Retrieve the name of the variable that contains the name of the tenant's keyvault
  - task: AzureCLI@2
    displayName: Getting Tenant Keyvault name
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        $getvariable = az keyvault secret list --vault-name $(vaultsNamesKeyvault) --output table --query [].'name'| Select-String -pattern '^$(CUSTOMERNAME)KVname$'
        $kvname = az keyvault secret show --name $getvariable --vault-name $(vaultsNamesKeyvault) --query 'value'
        $kvname = $kvname.Trim('"','''')
        Write-Host ("##vso[task.setvariable variable=TENANTKV;]$kvname")

  #take variables to be used from the tenant Keyvault
  - task: AzureKeyVault@1
    displayName: Tenant Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(TENANTKV)'
      SecretsFilter: '*'
      runAsPreJob: false

  #Access token creation to access license API by using account configured in AAD and credentials stored in shared keyvault
  - task: PowerShell@2
    displayName: Create the token to access the License API
    inputs:
      targetType: 'inline'
      script: |
        $Url = "https://login.microsoftonline.com/$(msmonitorLicenseTenant)/oauth2/token"
        $username = "$(msmonitorLicensetokenusername)"
        $password = "$(msmonitorLicensetokenpwd)"
        $Body = @{
            grant_type = "password"
            username = $username
            password = $password
            resource = "api://$(msmonitorLicenseResource)"
            client_id = "$(msmonitorLicenseClientid)"
            client_secret = "$(msmonitorLicenseClientSecret)"
        }
        $reponse = (Invoke-RestMethod -Method 'Post' -Uri $Url -Body $body)
        $token = $reponse.access_token
        Write-Host "##vso[task.setvariable variable=TOKENAPI;]$token"

  #the machineid is set to 'zeros' since we are using the scanconfiguration microservice that needs this to avoid the check of it
  #then check if there is an active license for the client to be used, if not creates it and then apply it
  - task: PowerShell@2
    name: licenseTask
    displayName: Creates or recover the license
    inputs:
      targetType: 'inline'
      script: |
        $machineId = "00000000-0000-0000-0000-000000000000"
        $headers = @{
        "Authorization" = "Bearer $(TOKENAPI)"
        "Content-Type" = "application/json"
        "Accept" = "application/json"
        }

        $clientLicenses = Invoke-RestMethod -Uri "$(msmonitorLicenseUri)/api/license?companyName=$(CUSTOMERNAME)&type=oncloud" -Method Get -Headers $headers -UseBasicParsing | ConvertFrom-Json
        $activeLicenseExists = $clientLicenses | Select-String 'Active'

        if (![string]::IsNullOrEmpty($activeLicenseExists)) {
          Write-Host "Active Client License Exists... Recovering License Code..."
          $licensecode=(($activeLicenseExists -split '(;)' | Select-String 'LicenseCode') -split 'LicenseCode=')
        }else { 
          Write-Host "Active Client License Does Not Exist... Creating License..."

          $Bodypost = @"
          {"CompanyName":"$(CUSTOMERNAME)", "MachineId":"$machineId", "GSXContactMail":"$(MSmonitor_LICENSE_GSX_CONTACT)", "ClientContactMail":"$(MSmonitor_LICENSE_CLIENT_CONTACT)", "Status":"$(MSmonitor_LICENSE_STATUS)", "Packages":[{"Level":$(MSmonitor_LICENSE_LEVEL), "Name":"$(MSmonitor_LICENSE_TYPE)", "NumberOfUsers":$(MSmonitor_LICENSE_USERS_NUMBER), "ExpirationDate":"$(MSmonitor_LICENSE_EXPIRATION_DATE)T00:00:00"}]}
        "@
        
          $createLicense = Invoke-RestMethod -Uri "$(msmonitorLicenseUri)/api/license/sign" -Method Post -body $Bodypost -Headers $headers -UseBasicParsing
          $licensecode = (($createLicense -split '(;)' | Select-String 'LicenseCode') -split 'LicenseCode=')
        }

        Write-Host "##vso[task.setvariable variable=LICENSECODE;isOutput=true;]$licensecode"


#JOB TO DEPLOY KUBERNETES RESOURCES USING THE CONFIGURED AGENT IN HUB VNET
#the agent name is devops-agent by default in every environment
- job: AKS_MSmonitor_Resources_Job
  dependsOn: License_Generation_Job
  pool:
    name: $(agent-pool-name)
    demands:
    - agent.os -equals Linux
  
  variables:
    LICENSECODE: $[ dependencies.License_Generation_Job.outputs['licenseTask.LICENSECODE']]
  
  steps:        
  #take variables to be used from the shared Keyvault
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true

  #Retrieve the name of the variable that contains the name of the tenant's keyvault
  - task: AzureCLI@2
    displayName: Getting Tenant Keyvault name
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        getvariable=$(az keyvault secret list --vault-name $(vaultsNamesKeyvault) --output table --query [].'name'| grep '$(CUSTOMERNAME)')
        kvname=$(az keyvault secret show --name $getvariable --vault-name $(vaultsNamesKeyvault) --query 'value' | tr -d \'\")
        echo "##vso[task.setvariable variable=TENANTKV;]$kvname"

  #take variables to be used from the tenant Keyvault
  - task: AzureKeyVault@1
    displayName: Tenant Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(TENANTKV)'
      SecretsFilter: '*'
      runAsPreJob: false
  
  #validate if namespace exists and creates a variable to be checked in the next tasks
  - task: AzureCLI@2
    displayName: Test AKS resources existence
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az login --identity
        az aks get-credentials --resource-group $(aks-resource-group) --name $(aks-cluster-name) --overwrite-existing --file /home/azureuser/.kube/config
        export KUBECONFIG=/home/azureuser/.kube/config
        kubelogin convert-kubeconfig -l msi
        Namespace=$(kubectl get namespace | grep $(CUSTOMERNAME))
        if [ -z "$Namespace" ]
        then
          echo "##vso[task.setvariable variable=CreateNamespace;]true"
        else
          echo "##vso[task.setvariable variable=CreateNamespace;]false"
        fi
  
  #replace variables in kubernetes files using the input variables and also from the two keyvaults
  - task: replacetokens@5
    displayName: Replace variables in MSmonitor kubernetes templates
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor'
      targetFiles: |
        secret-msmonitor.yaml
        configmap-msmonitor.yaml
        deploy-msmonitor.yaml
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

#replace variables in kubernetes files using the input variables and also from the two keyvaults
  - task: replacetokens@5
    displayName: Replace variables in msm-agent kubernetes templates
    condition: ne(variables.msm-agent_IMAGE_VERSION, ' ')
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor'
      targetFiles: |
        deploy-msm-agent.yaml
        configmap-msm-agent.yaml
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  #creation of client's namespace in kubernetes if doesn't exist by checking the variable CreateNamespace created before
  - task: Kubernetes@1
    displayName: Create Tenant Namespace
    condition: eq(variables.CreateNamespace, True)
    inputs:
      connectionType: 'None'
      command: 'create'
      arguments: 'namespace $(CUSTOMERNAME)'
      secretType: 'generic'

  #creation of client's secret in kubernetes
  - task: Kubernetes@1
    displayName: Create MSmonitor Secret
    inputs:
      connectionType: 'None'
      forceUpdate: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor/secret-msmonitor.yaml
      secretType: 'generic'

  #creation of client's configmap in kubernetes
  - task: Kubernetes@1
    displayName: Create MSmonitor Configmap
    inputs:
      connectionType: 'None'
      forceUpdateConfigMap: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor/configmap-msmonitor.yaml
      secretType: 'generic'

    #creation of client's configmap in kubernetes
  - task: Kubernetes@1
    displayName: Create msm-agent Configmap
    condition: ne(variables.msm-agent_IMAGE_VERSION, ' ')
    inputs:
      connectionType: 'None'
      forceUpdateConfigMap: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor/configmap-msm-agent.yaml
      secretType: 'generic'
  
  #create msmonitor container inside the cluster
  - task: Kubernetes@1
    displayName: Deploy MSmonitor Container in Kubernetes
    inputs:
      connectionType: 'None'
      forceUpdate: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor/deploy-msmonitor.yaml
      secretType: 'generic'

  #create msm-agent container inside the cluster
  - task: Kubernetes@1
    displayName: Deploy msm-agent pod in Kubernetes
    condition: ne(variables.msm-agent_IMAGE_VERSION, ' ')
    inputs:
      connectionType: 'None'
      forceUpdate: true
      namespace: '$(CUSTOMERNAME)'
      command: apply
      arguments: -f $(System.DefaultWorkingDirectory)/deployment/pipelines-files/kubernetes-files/msmonitor/deploy-msm-agent.yaml
      secretType: 'generic'