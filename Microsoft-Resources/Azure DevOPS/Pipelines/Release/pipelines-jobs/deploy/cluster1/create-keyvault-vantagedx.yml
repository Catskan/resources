jobs:
- job: Keyvault_Job
  pool:
    vmImage: 'Ubuntu 20.04'

  steps:
  # # Display the current image version, the customername and if swo or not
  # - task: Bash@3
  #   displayName: 'Update Build Title Name'
  #   inputs:
  #     targetType: 'inline'
  #     script: | 
  #       echo "##vso[build.updatebuildnumber]$(MSmonitor_IMAGE_VERSION)_CLIENT=$(CUSTOMERNAME)_SWO=$(SWO_TENANT)"

  #take variables to be used from the shared Azure Keyvault
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true
  
  #adding execution permission to the script to create passwords
  - task: Bash@3
    displayName: Add execution permission to the scripts
    inputs:
      targetType: 'inline'
      script: 'chmod +x $(System.DefaultWorkingDirectory)/deployment/pipelines-files/linux-files/scripts/*.sh'

  #execution of bash script to create passwords
  # - task: Bash@3
  #   displayName: Execution of script to create passwords
  #   inputs:
  #     targetType: 'filePath'
  #     filePath: '$(System.DefaultWorkingDirectory)/deploy/linux-files/scripts/keyvault-passwords-creation.sh'

  #check client name structure and SSO validation before storing variables in the keyvault
  #for SSO if the variable is empty means that the SSO won't be configured for the client
  - task: Bash@3
    displayName: Check Structure of client variables before storing variables in the keyvault
    inputs:
      targetType: 'inline'
      script: |
        customername=$(CUSTOMERNAME)
        domainSSO="$(SSO_CLIENT_DOMAIN)"
        domainSSO=$(echo $domainSSO | sed 's/ *$//g')

        if [[ "$customername" =~ [[:upper:]] ]]; then
          "##vso[task.logissue type=error]THE CUSTOMERNAME CANNOT HAVE UPPERCASE LETTERS, PLEASE CHANGE ANY UPPERCASE LETTER TO LOWERCASE IN THE VARIABLE 'CUSTOMERNAME' IN AZURE DEVOPS LIBRARY";
          exit 1
        fi

        if [ -z "$domainSSO" ]
        then
          echo "SSO WILL NOT BE CONFIGURED FOR THIS CLIENT"
        else
          url="https://login.windows.net/$domainSSO/.well-known/openid-configuration"
          ssocheck=$(curl $url)
          ssoerror=$(echo $ssocheck | grep error)
          if [ -z "$ssoerror" ]
          then
            echo "VALID TENANT"
          else
            echo $ssoerror
            exit 1
          fi
        fi

  #check if client key vault is already created or soft deleted, if either of them, creates new client keyvault
  - task: AzureCLI@2
    displayName: Create Client Keyvault and Access Policy
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        kvname='$(CLIENT_KEYVAULT_NAME)'
        lengthkvname=${#kvname}
        if [ $lengthkvname -gt 23 ]
        then
         "##vso[task.logissue type=error]KEYVAULT NAME TOO LONG, MAX 23 CHARACTERS, PLEASE CHANGE THE PIPELINE VARIABLE 'CLIENT_KEYVAULT_NAME'";
         exit 1 
        fi
        getkeyvault=$(az keyvault list -g '$(keyvaultsResourceGroup)' --query [].name --output tsv | grep -w $kvname )
        if [ -z "$getkeyvault" ]
        then
          deletedKeyvault=$(az keyvault list-deleted --query [].name --output tsv | grep $kvname)
          if [ -z "$deletedKeyvault" ]
          then
            echo "KEYVAULT DOESN'T EXISTS... CREATING IT"
            echo "##vso[task.setvariable variable=FILLKEYVAULT]true"
            az keyvault create --location $(location) --name $kvname --resource-group '$(keyvaultsResourceGroup)'
            az keyvault set-policy -n $kvname \
            --key-permissions \
            --certificate-permissions \
            --secret-permissions get list set delete \
            --spn '$(azdevops-svc-connection-sp-client-id)'
          else
            "##vso[task.logissue type=error]THE KEYVAULT IS IN SOFT-DELETED MODE, PLEASE PURGE IT BEFORE CREATING A NEW ONE";
          fi
        else
          echo "KEYVAULT ALREADY EXISTS... DOING NOTHING"
          echo "##vso[task.setvariable variable=FILLKEYVAULT]false"
        fi


  #Create a random GUID for MSP_TENANT_ID
  - task: guid-generator@2
    condition: eq(variables.FILLKEYVAULT, true)
    displayName: Generate GUID linked to the license
    inputs:
      VariableName: 'MSP_TENANT_ID'
      GuidToUpper: false

  #Create a random GUID for msm-agent
  - task: guid-generator@2
    condition: and(eq(variables.FILLKEYVAULT, true), ne(variables.msm-agent_IMAGE_VERSION, ' '))
    displayName: Generate GUID for msm-agent
    inputs:
      VariableName: 'MSmonitor_msm-agent_GUID'
      GuidToUpper: false

  #Generate a random passwords
  - task: Bash@3
    displayName: Generate Random Passwords
    inputs:
      targetType: 'inline'
      script: |
        createPassword () {
          randomPass="$(cat /dev/urandom | tr -c -d 'A-Za-z0-9' | head -c 23)"
          echo $randomPass;    
        }
        variables_list="
        SSO_REPORT_GENERATOR_PASSWORD
        KC_WEB_ADMIN_PASSWORD
        KC_DB_ADMIN_PASSWORD
        KEYCLOAK_MSmonitor_USER_PASSWORD
        CLIENT_ADMINLOGINPWD_DB
        CLIENT_READLOGINPWD_DB
        CLIENT_RMQPWD
        KIBANA_CLIENT_SECRET
        "
        for var in $variables_list; do
          echo "##vso[task.setvariable variable=$var]$(createPassword)"
        done

  #publish secrets to the keyvault
  - task: AzureCLI@2
    condition: eq(variables.FILLKEYVAULT, true)
    displayName: Publish Secrets to Keyvault
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        SECRETS_LIST="
        adminLogin-DB|==|$(CUSTOMERNAME)Adm
        adminUser-DB|==|$(CUSTOMERNAME)Adm
        readLogin-DB|==|$(CUSTOMERNAME)
        readUser-DB|==|$(CUSTOMERNAME)
        adminLoginPWD-DB|==|$(CLIENT_ADMINLOGINPWD_DB)
        readLoginPWD-DB|==|$(CLIENT_READLOGINPWD_DB)
        rmqVhost|==|$(CUSTOMERNAME)
        rmqUser|==|$(CUSTOMERNAME)
        rmqPWD|==|$(CLIENT_RMQPWD)
        db-name-msmonitor|==|$(CLIENT_DBNAME)_msmonitor
        db-name-ntwmonitor|==|$(CLIENT_DBNAME)_ntwmonitor
        db-sql-server|==|$(sqlServerName)
        db-sql-pool|==|$(elasticPoolName)
        sso-client-domain|==|$(SSO_CLIENT_DOMAIN)
        client-name|==|$(CUSTOMERNAME)
        mspTenantId|==|$(MSP_TENANT_ID)
        mspTenantName|==|$(CUSTOMERNAME)
        sso-ReportGeneratorUsername|==|ntwmonitor_user
        sso-ReportGeneratorPassword|==|$(SSO_REPORT_GENERATOR_PASSWORD)
        swo-tenant|==|$(SWO_TENANT)
        kcDBname|==|$(CUSTOMERNAME)db
        kcWebAdminUser|==|$(CUSTOMERNAME)admin
        kcWebAdminPwd|==|$(KC_WEB_ADMIN_PASSWORD)
        kcDBadminUser|==|$(CUSTOMERNAME)admindb
        kcDBadminPwd|==|$(KC_DB_ADMIN_PASSWORD)
        kcMSmonitorUserPwd|==|$(KEYCLOAK_MSmonitor_USER_PASSWORD)
        martelloAdminTenantId|==|$(MARTELLO_ADMIN_TENANT_ID)
        kibana-client-secret|==|$(KIBANA_CLIENT_SECRET)
        "
        for s in $SECRETS_LIST ; do
          secret_name=${s%|==|*}
          secret_value=${s#*|==|}
          az keyvault secret set --name $secret_name --value $secret_value --vault-name '$(CLIENT_KEYVAULT_NAME)' --output none
          echo $secret_name" published" 
        done

#publish secrets to the keyvault
  - task: AzureCLI@2
    condition: and(eq(variables.FILLKEYVAULT, true), ne(variables.msm-agent_IMAGE_VERSION, ' '))
    displayName: Publish msm-agent GUID to Keyvault
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        az keyvault secret set --name msm-agentGUID --value $(MSmonitor_msm-agent_GUID) --vault-name '$(CLIENT_KEYVAULT_NAME)' --output none
        echo "msm-agentGUID published" 
  
  #publish tenant keyvault name to the keyvaults names dictionary
  - task: AzureCLI@2
    displayName: Publish Key Vault Name
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        az keyvault secret set --name '$(CUSTOMERNAME)KVname' --value '$(CLIENT_KEYVAULT_NAME)' --vault-name '$(vaultsNamesKeyvault)'

#Set access policy for DevOPS to the tenant's KV
  - task: AzureCLI@2
    displayName: Set access policy for DevOPS Azure AD Group
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        az keyvault set-policy --name '$(CLIENT_KEYVAULT_NAME)' --key-permissions --certificate-permissions --secret-permissions get list set delete --object-id '$(gsxAzureAdDevOpsGroupID)'
        az keyvault set-policy --name '$(CLIENT_KEYVAULT_NAME)' --key-permissions --certificate-permissions --secret-permissions get list set delete --object-id '$(mtloAzureAdDevOpsGroupID)'
        
        
#Set access policy for QA to the tenant's KV  
  - task: AzureCLI@2
    displayName: Set access policy for QA Azure AD Group
    condition: or(eq(variables.environment, 'dev'), eq(variables.environment, 'qa'))
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        az keyvault set-policy --name '$(CLIENT_KEYVAULT_NAME)' --key-permissions --certificate-permissions --secret-permissions get list set delete --object-id '$(azureAdQAGroupID)'
