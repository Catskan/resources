jobs:
#JOB TO DEPLOY KUBERNETES RESOURCES USING THE CONFIGURED AGENT IN HUB VNET
#the agent name is devops-agent by default in every environment
- job: ES_Resources_Job
  pool:
    name: $(agent-pool-name)
    demands:
    - agent.os -equals Linux
  
  steps:
  - task: AzureKeyVault@1
    displayName: Shared Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(shared-keyvault)'
      SecretsFilter: '*'
      runAsPreJob: true

#Retrieve the name of the variable that contains the name of the tenant's keyvault
  - task: AzureCLI@2
    displayName: Getting Tenant Keyvault name
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        getCustomerNameVariable=$(az keyvault secret list --vault-name $(vaultsNamesKeyvault) --output table --query [].'name'| grep -w '$(CUSTOMERNAME)KVname')
        kvname=$(az keyvault secret show --name $getCustomerNameVariable --vault-name $(vaultsNamesKeyvault) --query 'value' | tr -d \'\")
        echo "##vso[task.setvariable variable=TENANTKV;]$kvname"

#take variables to be used from the tenant Keyvault
  - task: AzureKeyVault@1
    displayName: Tenant Azurekeyvault Variables Import
    inputs:
      azureSubscription: '$(azure-subscription)'
      KeyVaultName: '$(TENANTKV)'
      SecretsFilter: '*'
      runAsPreJob: false

  - task: replacetokens@5
    displayName: Replace variables in ElasticSearch templates
    # condition: eq(variables.environment, 'prod-west-eu')
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/deployment/pipelines-files/elasticsearch-files'
      targetFiles: |
        deployment-schema-$(environment).json
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

# #replace variables in kubernetes files using the input variables and also from the two keyvaults
#   - task: replacetokens@5
#     displayName: Replace variables in ElasticSearch template
#     condition: eq(variables.environment, 'prod-east-us')
#     inputs:
#       rootDirectory: '$(System.DefaultWorkingDirectory)/deployment/pipelines-files/elasticsearch-files'
#       targetFiles: |
#         deployment-schema-$(environment).json
#       encoding: 'auto'
#       writeBOM: true
#       actionOnMissing: 'fail'
#       keepToken: false
#       tokenPrefix: '#{'
#       tokenSuffix: '}#'

#Create the deployment and get credentials to variables
  - task: Bash@3
    displayName: Install jq 
    inputs:
      targetType: 'inline'
      script: |
        sudo apt update && sudo apt install jq -y

#Create the deployment and get credentials to variables
#This task create the deployment by the XPOST and get informations from the output (can't be accessible after)
  - task: Bash@3
    displayName: Create & Check ElasticSearch deployment
    inputs:
      targetType: 'inline'
      script: |
        reponsecode=$(curl -o newdeployment.json -w '\n%{http_code}\n' -XPOST -H 'Content-Type: application/json' -H "Authorization: ApiKey $(elasticSearchApiKey)" "https://api.elastic-cloud.com/api/v1/deployments" --data-binary "@/$(System.DefaultWorkingDirectory)/deployment/pipelines-files/elasticsearch-files/deployment-schema-$(environment).json")
        if (( $(echo $reponsecode) >= 400  )); then
          "##vso[task.logissue type=error]THERE WAS AND ERROR WITH THE ELASTICSEARCH DEPLOYMENT, PLEASE CHECK ERROR MESSAGE";
          cat newdeployment.json
          exit 1
        else
          echo 'DEPLOYMENT DONE CORRECTLY';
          cat newdeployment.json
        fi
        echo "##vso[task.setvariable variable=elasticDeploymentID]$(jq -r '.id' newdeployment.json)"
        echo "##vso[task.setvariable variable=elasticDeploymentUsername]$(jq -r '.resources[0].credentials.username' newdeployment.json)"
        echo "##vso[task.setvariable variable=elasticDeploymentPassword]$(jq -r '.resources[0].credentials.password' newdeployment.json)"

#Verify Elastic search deployment creation & get the complete URL (not accessible from the XPOST output)
  - task: Bash@3
    displayName: Get ES Instance's URL
    inputs:
      targetType: 'inline'
      script: |
        Deployment=$(curl -XGET -H 'Content-Type: application/json' -H "Authorization: Apikey $(elasticSearchApiKey)" "https://api.elastic-cloud.com/api/v1/deployments/$(elasticDeploymentID)")
        echo "##vso[task.setvariable variable=elasticDeploymentUrl]$(jq -r '.resources.elasticsearch[].info.metadata.aliased_url' <<< ${Deployment})"
        echo "##vso[task.setvariable variable=kibanaDeploymentUrl]$(jq -r '.resources.kibana[].info.metadata.aliased_url' <<< ${Deployment})"

  #publish secrets to the keyvault
  - task: AzureCLI@2
    displayName: Publish Secrets to Keyvault
    inputs:
      azureSubscription: '$(azure-subscription)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      failOnStandardError: true
      inlineScript: |
        SECRETS_LIST="
        elasticsearch-deployment-id|==|$(elasticDeploymentID)
        elasticsearch-username|==|$(elasticDeploymentUsername)
        elasticsearch-password|==|$(elasticDeploymentPassword)
        elasticsearch-endpoint-url|==|$(elasticDeploymentUrl)
        kibana-endpoint-url|==|$(kibanaDeploymentUrl)
        "
        for s in $SECRETS_LIST ; do
          secret_name=${s%|==|*}
          secret_value=${s#*|==|}
          az keyvault secret set --name $secret_name --value $secret_value --vault-name '$(CLIENT_KEYVAULT_NAME)' --output none
          echo $secret_name" published" 
        done